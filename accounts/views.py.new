from django.contrib.auth import logout
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.authentication import TokenAuthentication, SessionAuthentication
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.authtoken.models import Token
import logging
import traceback

logger = logging.getLogger(__name__)

class LogoutView(APIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    
    def post(self, request):
        try:
            # Blacklist the refresh token if it exists
            if hasattr(request, 'auth') and request.auth:
                try:
                    # Get the refresh token from the request
                    refresh_token = request.data.get('refresh')
                    if refresh_token:
                        try:
                            # Blacklist the refresh token
                            token = RefreshToken(refresh_token)
                            token.blacklist()
                            logger.info(f"Successfully blacklisted refresh token for user: {request.user.username}")
                            
                            # Also invalidate the access token by blacklisting it
                            access_token = request.auth
                            if access_token:
                                try:
                                    access_token.blacklist()
                                    logger.info(f"Successfully blacklisted access token for user: {request.user.username}")
                                except Exception as e:
                                    logger.warning(f"Failed to blacklist access token: {str(e)}")
                        except Exception as e:
                            logger.warning(f"Failed to blacklist refresh token: {str(e)}")
            
            # Always perform session logout
            logout(request)
            
            # Delete the auth token if it exists
            try:
                Token.objects.filter(user=request.user).delete()
                logger.info(f"Successfully deleted auth token for user: {request.user.username}")
            except Exception as e:
                logger.warning(f"Failed to delete auth token: {str(e)}")
            
            logger.info(f"Successfully logged out user: {request.user.username}")
            
            return Response({
                'status': 'success',
                'message': 'Successfully logged out'
            })
                
        except Exception as e:
            logger.error(f"Unexpected error during logout: {str(e)}")
            logger.error(traceback.format_exc())
            return Response({
                'status': 'error',
                'message': 'An unexpected error occurred'
            }, status=500) 